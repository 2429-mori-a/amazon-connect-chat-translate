export default Utils;
declare namespace Utils {
    /**
     * Asserts that a premise is true.
     */
    function assertTrue(premise: any, message: any): void;
    /**
     * Asserts that a value is not null or undefined.
     */
    function assertNotNull(value: any, name: any): any;
    function now(): number;
    function isString(value: any): boolean;
    /**
     * Generate a random ID consisting of the current timestamp
     * and a random base-36 number based on Math.random().
     */
    function randomId(): any;
    function assertIsNonEmptyString(value: any, key: any): void;
    function assertIsList(value: any, key: any): void;
    function assertIsEnum(value: any, allowedValues: any, key: any): void;
    /**
     * Generate an enum from the given list of lower-case enum values,
     * where the enum keys will be upper case.
     *
     * Conversion from pascal case based on code from here:
     * http://stackoverflow.com/questions/30521224
     */
    function makeEnum(values: any): {};
    function contains(obj: any, value: any): boolean;
    function find(array: any, predicate: any): any;
    function containsValue(obj: any, value: any): boolean;
    /**
     * Determine if the given value is a callable function type.
     * Borrowed from Underscore.js.
     */
    function isFunction(obj: any): boolean;
    /**
     * Get a list of values from a Javascript object used
     * as a hash map.
     */
    function values(map: any): any[];
    function isObject(value: any): boolean;
    function assertIsObject(value: any, key: any): void;
    function delay(ms: any): Promise<any>;
    function asyncWhileInterval(f: any, predicate: any, interval: any, count?: number, error?: null): any;
    function isAttachmentContentType(contentType: any): boolean;
}
