export const csmWorkerString: "(function() {\n  const global = self;\n  const csm = global.csm || {};\n  global.csm = csm;\n\n  csm.EVENT_TYPE = {\n    LOG: 'LOG',\n    METRIC: 'METRIC',\n    CONFIG: 'CONFIG',\n    WORKFLOW_EVENT: 'WORKFLOW_EVENT',\n    CUSTOM: 'CUSTOM',\n    CLOSE: 'CLOSE',\n    SET_AUTH: 'SET_AUTH',\n    SET_CONFIG: 'SET_CONFIG',\n  };\n\n  csm.UNIT = {\n    COUNT: 'Count',\n    SECONDS: 'Seconds',\n    MILLISECONDS: 'Milliseconds',\n    MICROSECONDS: 'Microseconds',\n  };\n})();\n\n(function() {\n  const global = self;\n  const csm = global.csm || {};\n  global.csm = csm;\n\n  const MAX_METRIC_DIMENSIONS = 10;\n\n  /** ********* Dimension Classes ***********/\n\n  const Dimension = function(name, value) {\n    csm.Util.assertExist(name, 'name');\n    csm.Util.assertExist(value, 'value');\n\n    this.name = name;\n    this.value = value == null ? 'null' : (value === '' ? ' ' : value.toString());\n  };\n\n\n  /** ********* Metric Classes ***********/\n\n  const Metric = function(metricName, unit, value, dedupeOptions) {\n    csm.Util.assertExist(metricName, 'metricName');\n    csm.Util.assertExist(value, 'value');\n    csm.Util.assertExist(unit, 'unit');\n    csm.Util.assertTrue(csm.Util.isValidUnit(unit));\n    if (dedupeOptions) {\n      csm.Util.assertInObject(dedupeOptions, 'dedupeOptions', 'dedupeIntervalMs');\n    }\n\n    this.metricName = metricName;\n    this.unit = unit;\n    this.value = value;\n    this.timestamp = new Date();\n    this.dimensions = csm.globalDimensions ? csm.Util.deepCopy(csm.globalDimensions): [];\n    this.namespace = csm.configuration.namespace;\n    this.dedupeOptions = dedupeOptions; // optional. { dedupeIntervalMs: (int; required), context: (string; optional) }\n\n    // Currently, CloudWatch can't aggregate metrics by a subset of dimensions.\n    // To bypass this limitation, we introduce the optional dimensions concept to CSM.\n    // The CSM metric publisher will publish a default metric without optional dimension\n    // For each optional dimension, the CSM metric publisher publishes an extra metric with that dimension.\n    this.optionalDimensions = csm.globalOptionalDimensions ? csm.Util.deepCopy(csm.globalOptionalDimensions): [];\n  };\n\n  Metric.prototype.addDimension = function(name, value) {\n    this._addDimensionHelper(this.dimensions, name, value);\n  };\n\n  Metric.prototype.addOptionalDimension = function(name, value) {\n    this._addDimensionHelper(this.optionalDimensions, name, value);\n  };\n\n  Metric.prototype._addDimensionHelper = function(targetDimensions, name, value) {\n    // CloudWatch metric allows maximum 10 dimensions\n    // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CloudWatch.html#putMetricData-property\n    if ((this.dimensions.length + this.optionalDimensions.length) >= MAX_METRIC_DIMENSIONS) {\n      throw new csm.ExceedDimensionLimitException(name);\n    }\n\n    const existing = targetDimensions.find(function(dimension) {\n      return dimension.name === name;\n    });\n\n    if (existing) {\n      existing.value = value == null ? 'null' : (value === '' ? ' ' : value.toString());\n    } else {\n      targetDimensions.push(new Dimension(name, value));\n    }\n  };\n\n\n  /** ********* Telemetry Classes ***********/\n\n  const WorkflowEvent = function(params) {\n    this.timestamp = params.timestamp || new Date().getTime();\n    this.workflowType = params.workflow.type;\n    this.instanceId = params.workflow.instanceId;\n    this.userId = params.userId;\n    this.organizationId = params.organizationId;\n    this.accountId = params.accountId;\n    this.event = params.event;\n    this.appName = params.appName;\n    this.data = [];\n\n    // Convert 'data' map into the KeyValuePairList structure expected by the Lambda API\n    for (const key in params.data) {\n      if (Object.prototype.hasOwnProperty.call(params.data, key)) {\n        this.data.push({'key': key, 'value': params.data[key]});\n      }\n    }\n  };\n\n  /** ********* Exceptions ***********/\n\n  const NullOrUndefinedException = function(paramName) {\n    this.name = 'NullOrUndefinedException';\n    this.message = paramName + ' is null or undefined. ';\n  };\n  NullOrUndefinedException.prototype.toString = function() {\n    return this.name + ': ' + this.message;\n  };\n\n  const AssertTrueException = function() {\n    this.name = 'AssertTrueException';\n    this.message = 'Assertion failed. ';\n  };\n  AssertTrueException.prototype.toString = function() {\n    return this.name + ': ' + this.message;\n  };\n\n  const ExceedDimensionLimitException = function(dimensionName) {\n    this.name = 'ExceedDimensionLimitException';\n    this.message = 'Could not add dimension ' + dimensionName + ' . Metric has maximum 10 dimensions. ';\n  };\n  ExceedDimensionLimitException.prototype.toString = function() {\n    return this.name + ': ' + this.message;\n  };\n\n  const InitializationException = function() {\n    this.name = 'InitializationException';\n    this.message = 'Initialization failed. ';\n  };\n  InitializationException.prototype.toString = function() {\n    return this.name + ': ' + this.message;\n  };\n\n\n  csm.Dimension = Dimension;\n  csm.Metric = Metric;\n  csm.WorkflowEvent = WorkflowEvent;\n  csm.NullOrUndefinedException = NullOrUndefinedException;\n  csm.AssertTrueException = AssertTrueException;\n  csm.InitializationException = InitializationException;\n  csm.ExceedDimensionLimitException = ExceedDimensionLimitException;\n})();\n\n(function() {\n  const global = self;\n  const csm = global.csm || {};\n  global.csm = csm;\n\n  const validTimeUnits = [csm.UNIT.SECONDS, csm.UNIT.MILLISECONDS, csm.UNIT.MICROSECONDS];\n  const validUnits = validTimeUnits.concat(csm.UNIT.COUNT);\n\n  const Util = {\n    assertExist: function(value, paramName) {\n      if (value === null || value === undefined) {\n        throw new csm.NullOrUndefinedException(paramName);\n      }\n    },\n    assertTrue: function(value) {\n      if (!value) {\n        throw new csm.AssertTrueException();\n      }\n    },\n    assertInObject: function(obj, objName, key) {\n      if (obj === null || obj === undefined || typeof obj !== 'object') {\n        throw new csm.NullOrUndefinedException(objName);\n      }\n      if (key === null || key === undefined || !obj[key]) {\n        throw new csm.NullOrUndefinedException(`${objName}[${key}]`);\n      }\n    },\n    isValidUnit: function(unit) {\n      return validUnits.includes(unit);\n    },\n    isValidTimeUnit: function(unit) {\n      return validTimeUnits.includes(unit);\n    },\n    isEmpty: function(value) {\n      if (value !== null && typeof val === 'object') {\n        return Objects.keys(value).length === 0;\n      }\n      return !value;\n    },\n    deepCopy: function(obj) {\n      // NOTE: this will fail if obj has a circular reference\n      return JSON.parse(JSON.stringify(obj));\n    },\n\n    /**\n     * This function is used before setting the page location for default metrics and logs,\n     * and the APIs that set page location\n     * Can be overridden by calling csm.API.setPageLocationTransformer(function(){})\n     * @param {string}        pathname path for page location\n     * @return {string}       pathname provided\n     */\n    pageLocationTransformer: function(pathname) {\n      return pathname;\n    },\n\n    /**\n     * As of now, our service public claims only support for Firefox and Chrome\n     * Reference https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n     *\n     * This function will only return firefox, chrome and others\n     *\n     * Best practice as indicated in MDN, \"Avoiding user agent detection\"\n     */\n    getBrowserDetails: function() {\n      const userAgent = window.navigator.userAgent;\n      const details = {};\n      if (userAgent.includes('Firefox') && !userAgent.includes('Seamonkey')) {\n        details.name = 'Firefox';\n        details.version = getBrowserVersion('Firefox');\n      } else if (userAgent.includes('Chrome') && !userAgent.includes('Chromium')) {\n        details.name = 'Chrome';\n        details.version = getBrowserVersion('Chrome');\n      }\n    },\n\n    randomId: function() {\n      return new Date().getTime() + '-' + Math.random().toString(36).slice(2);\n    },\n\n    getOrigin: function() {\n      return document.location.origin;\n    },\n\n    getReferrerUrl: function() {\n      const referrer = document.referrer || '';\n      return this.getURLOrigin(referrer);\n    },\n\n    getWindowParent: function() {\n      let parentLocation = '';\n      try {\n        parentLocation = window.parent.location.href;\n      } catch (e) {\n        parentLocation = '';\n      }\n      return parentLocation;\n    },\n\n    getURLOrigin: function(urlValue) {\n      let origin = '';\n      const originArray = urlValue.split( '/' );\n      if (originArray.length >= 3) {\n        const protocol = originArray[0];\n        const host = originArray[2];\n        origin = protocol + '//' + host;\n      }\n      return origin;\n    },\n\n  };\n\n  const getBrowserVersion = function(browserName) {\n    const userAgent = window.navigator.userAgent;\n    const browserNameIndex = userAgent.indexOf(browserName);\n    const nextSpaceIndex = userAgent.indexOf(' ', browserNameIndex);\n    if (nextSpaceIndex === -1) {\n      return userAgent.substring(browserNameIndex + browserName.length + 1, userAgent.length);\n    } else {\n      return userAgent.substring(browserNameIndex + browserName.length + 1, nextSpaceIndex);\n    }\n  };\n\n  csm.Util = Util;\n})();\n\n(function() {\n  const XHR_DONE_READY_STATE = 4; // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n\n  const global = self;\n  const configuration = {};\n  const batchSettings = {\n    maxMetricsSize: 30,\n    maxWorkflowEventsSize: 30,\n    putMetricsIntervalMs: 30000,\n    putWorkflowEventsIntervalMs: 2000,\n  };\n  const metricLists = {}; // metricList per CloudWatch Namespace\n  const metricMap = {};\n  const ports = {};\n  let workflowEvents = {workflowEventList: []};\n\n  // SharedWorker wiki:  https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\n  onconnect = function(connectEvent) {\n    const port = connectEvent.ports[0];\n\n    port.onmessage = function(event) {\n      const data = event.data;\n      const messageType = data.type;\n      const message = data.message;\n      const endpoint = data.endpoint;\n      const headers = data.headers;\n\n      if (data.portId && !(data.portId in ports)) {\n        // This could happen when a user tries to close a tab which has a pop up alert to confirm closing,\n        // and the user decides to cancel closing\n        // This triggers before unload event while the tab or window is not closed actually\n        ports[data.portId] = port;\n      }\n\n      const {METRIC, WORKFLOW_EVENT, CUSTOM, CONFIG, SET_AUTH, SET_CONFIG, CLOSE} = csm.EVENT_TYPE;\n      switch (messageType) {\n        case METRIC: {\n          csm.Util.assertInObject(message, 'message', 'namespace');\n          const namespace = message.namespace;\n          if (shouldDedupe(message)) break;\n          addMetricEventToMap(message);\n          if (metricLists[namespace]) {\n            metricLists[namespace].push(message);\n          } else {\n            metricLists[namespace] = [message];\n          }\n          if (metricLists[namespace].length >= batchSettings.maxMetricsSize) {\n            putMetricsForNamespace(namespace);\n          }\n          break;\n        }\n        case WORKFLOW_EVENT: {\n          workflowEvents.workflowEventList.push(message);\n          if (workflowEvents.length >= batchSettings.maxWorkflowEventsSize) {\n            putWorkflowEvents();\n          }\n          break;\n        }\n        case CUSTOM: {\n          putCustom(endpoint, headers, message);\n          break;\n        }\n        case CONFIG: {\n          const portId = Object.keys(ports).length + 1; // portId starts from 1\n          ports[portId] = port;\n          for (const setting of Object.keys(message)) {\n            if (!csm.Util.isEmpty(message[setting])) {\n              configuration[setting] = message[setting];\n            }\n          }\n\n          // set optional batch settings\n          if (configuration.batchSettings) {\n            for (const setting of Object.keys(configuration.batchSettings)) {\n              batchSettings[setting] = configuration.batchSettings[setting];\n            }\n          }\n          // send metrics and workflow events at set intervals\n          putMetrics();\n          putWorkflowEvents();\n          global.setInterval(putMetrics, batchSettings.putMetricsIntervalMs);\n          global.setInterval(putWorkflowEvents, batchSettings.putWorkflowEventsIntervalMs);\n\n          port.postMessage(\n              {\n                type: csm.EVENT_TYPE.CONFIG,\n                portId: portId,\n              },\n          );\n          break;\n        }\n        case SET_AUTH: {\n          configuration.authParams = message;\n          authenticate();\n          break;\n        }\n        case SET_CONFIG: {\n          configuration[message.key] = message.value;\n          break;\n        }\n        case CLOSE: {\n          delete ports[data.portId];\n          if (Object.keys(ports).length === 0) {\n            putMetrics();\n            putWorkflowEvents();\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    };\n  };\n\n  const shouldDedupe = function(metric) {\n    try {\n      const pastMetric = getPastMetricEvent(metric);\n      return pastMetric && metric.dedupeOptions &&\n        (metric.timestamp - pastMetric.timestamp < metric.dedupeOptions.dedupeIntervalMs);\n    } catch (err) {\n      console.error('Error in shouldDedupe', err);\n      return false;\n    }\n  };\n\n  const getPastMetricEvent = function(metric) {\n    try {\n      return metricMap[getMetricEventKey(metric)];\n    } catch (err) {\n      // ignore err - no previous metrics found\n      return null;\n    }\n  };\n\n  const addMetricEventToMap = function(metric) {\n    try {\n      metricMap[getMetricEventKey(metric)] = metric;\n    } catch (err) {\n      console.error('Failed to add event to metricMap', err);\n    }\n    csm.metricMap = metricMap;\n  };\n\n  const getMetricEventKey = function(metric) {\n    const {namespace, metricName, unit, dedupeOptions} = metric;\n    let context = 'global';\n    if (dedupeOptions && dedupeOptions.context) {\n      context = dedupeOptions.context;\n    }\n    return `${namespace}-${metricName}-${unit}-${context}`;\n  };\n\n  const authenticate = function() {\n    postRequest(configuration.endpointUrl + '/auth', {authParams: configuration.authParams},\n        {\n          success: function(response) {\n            if (response && response.jwtToken) {\n              configuration.authParams.jwtToken = response.jwtToken;\n            }\n          },\n          failure: function(response) {\n            broadcastMessage('[ERROR] csm auth failed!');\n            broadcastMessage('Response : ' + response);\n          },\n        }, {'x-api-key': 'auth-method-level-key'});\n  };\n\n  /**\n   * Put metrics to service when:\n   * a) metricList size is at maxMetricsSize\n   * b) every putMetricsIntervalMs time if the metricList is not empty\n   * c) worker is closed\n   *\n   * Timer is reset, and metricList emptied after each putMetrics call\n   */\n  const putMetrics = function() {\n    for (const namespace of Object.keys(metricLists)) {\n      putMetricsForNamespace(namespace);\n    }\n  };\n\n  const putMetricsForNamespace = function(namespace) {\n    csm.Util.assertInObject(metricLists, 'metricLists', namespace);\n    const metricList = metricLists[namespace];\n\n    if (metricList.length > 0 && !configuration.dryRunMode && configuration.endpointUrl) {\n      postRequest(configuration.endpointUrl + '/put-metrics', {\n        metricNamespace: namespace,\n        metricList: metricList,\n        authParams: configuration.authParams,\n        accountId: configuration.accountId,\n        organizationId: configuration.organizationId,\n        agentResourceId: configuration.userId,\n      }, {\n        success: function(response) {\n          if (response) {\n            broadcastMessage('PutMetrics response : ' + response);\n            if (response.unsetToken) {\n              delete configuration.authParams.jwtToken;\n              authenticate();\n            }\n          }\n        },\n        failure: function(response) {\n          broadcastMessage('[ERROR] Put metrics to service failed! ');\n        },\n      });\n    }\n    metricLists[namespace] = [];\n  };\n\n  /**\n   * Put metrics to service every two seconds if there are events to be put.\n   */\n  const putWorkflowEvents = function() {\n    if (workflowEvents.workflowEventList.length > 0 && !configuration.dryRunMode && configuration.endpointUrl) {\n      workflowEvents.authParams = configuration.authParams;\n      postRequest(configuration.endpointUrl + '/put-workflow-events', workflowEvents,\n          {\n            success: function(response) {\n              if (response) {\n                if (response.workflowEventList && response.workflowEventList.length > 0) {\n                  broadcastMessage('[WARN] There are ' + response.length + ' workflow events that failed to publish');\n                  broadcastMessage('Response : ' + response);\n                }\n                if (response.unsetToken) {\n                  delete configuration.authParams.jwtToken;\n                  authenticate();\n                }\n              }\n            },\n            failure: function(response) {\n              broadcastMessage('[ERROR] Put workflow events to service failed! ');\n            },\n          });\n    }\n\n    workflowEvents = {workflowEventList: []};\n  };\n\n  /**\n   * Put data to custom endpoint on demand\n   * @param {string} endpoint\n   * @param {object} headers\n   * @param {object} data to send to endpoint\n   */\n  const putCustom = function(endpoint, headers, data) {\n    if (!configuration.dryRunMode && endpoint && data) {\n      postRequest(endpoint, data, {\n        success: function(response) {\n          if (response) {\n            broadcastMessage('Response : ' + response);\n          }\n        },\n        failure: function(response) {\n          broadcastMessage('[ERROR] Failed to put custom data! ');\n        },\n      }, headers);\n    }\n  };\n\n  /**\n   * Broadcast message to all tabs\n   * @param {string} message to post to all the tabs\n   */\n  const broadcastMessage = function(message) {\n    for (const portId in ports) {\n      if (Object.prototype.hasOwnProperty.call(ports, portId)) {\n        ports[portId].postMessage(message);\n      }\n    }\n  };\n\n  const postRequest = function(url, data, callbacks, headers) {\n    csm.Util.assertExist(url, 'url');\n    csm.Util.assertExist(data, 'data');\n\n    callbacks = callbacks || {};\n    callbacks.success = callbacks.success || function() {};\n    callbacks.failure = callbacks.failure || function() {};\n\n    const request = new XMLHttpRequest(); // new HttpRequest instance\n    request.onreadystatechange = function() {\n      const errorList = request.response ? JSON.parse(request.response): [];\n      if (request.readyState === XHR_DONE_READY_STATE) { // request finished and response is ready\n        if (request.status === 200) {\n          callbacks.success(errorList);\n        } else {\n          broadcastMessage('AJAX request failed with status: ' + request.status);\n          callbacks.failure(errorList);\n        }\n      }\n    };\n\n    request.open('POST', url);\n    if (headers && typeof headers === 'object') {\n      Object.keys(headers).forEach((header) => request.setRequestHeader(header, headers[header]));\n    } else {\n      request.setRequestHeader('Content-Type', 'application/json');\n    }\n    request.send(JSON.stringify(data));\n  };\n})()";
