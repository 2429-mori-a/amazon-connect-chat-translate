export var ChatClientFactory: ChatClientFactoryImpl;
declare class ChatClientFactoryImpl {
    clientCache: {};
    getCachedClient(optionsInput: any, logMetaData: any): any;
    _createAwsClient(options: any, logMetaData: any): AWSChatClient;
}
declare class AWSChatClient extends ChatClient {
    constructor(args: any);
    chatClient: any;
    invokeUrl: any;
    logger: {
        options: any;
        debug(...args: any[]): any;
        info(...args: any[]): any;
        warn(...args: any[]): any;
        error(...args: any[]): any;
        advancedLog(...args: any[]): any;
        _shouldLog(level: any): boolean;
        _writeToClientLogger(level: any, logStatement: any): any;
        _log(level: any, args: any): any;
        _convertToSingleStatement(args: any): string;
        _convertToString(arg: any): any;
    };
    describeView(viewToken: any, connectionToken: any): Promise<any>;
    createParticipantConnection(participantToken: any, type: any, acknowledgeConnection: any): Promise<any>;
    disconnectParticipant(connectionToken: any): Promise<any>;
    getTranscript(connectionToken: any, args: any): Promise<any>;
    sendMessage(connectionToken: any, content: any, contentType: any): Promise<any>;
    sendAttachment(connectionToken: any, attachment: any, metadata: any): Promise<any>;
    _uploadToS3(file: any, metadata: any): Promise<Response>;
    downloadAttachment(connectionToken: any, attachmentId: any): Promise<Blob>;
    _downloadUrl(url: any): Promise<Blob>;
    sendEvent(connectionToken: any, contentType: any, content: any): any;
    throttleEvent: any;
    _submitEvent(connectionToken: any, contentType: any, content: any): Promise<any>;
    _sendRequest(request: any): Promise<any>;
}
declare class ChatClient {
    sendMessage(participantToken: any, message: any, type: any): void;
    sendAttachment(participantToken: any, attachment: any, metadata: any): void;
    downloadAttachment(participantToken: any, attachmentId: any): void;
    disconnectParticipant(participantToken: any): void;
    sendEvent(connectionToken: any, contentType: any, content: any): void;
    createParticipantConnection(participantToken: any, type: any): void;
    describeView(): void;
}
export {};
