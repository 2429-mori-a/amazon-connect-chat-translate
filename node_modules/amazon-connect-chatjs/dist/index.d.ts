export const ChatSession: {
    create: (args: any) => {
        cleanUpOnParticipantDisconnect(): any;
        controller: any;
        onMessage(callback: any): void;
        onTyping(callback: any): void;
        onReadReceipt(callback: any): void;
        onDeliveredReceipt(callback: any): void;
        onConnectionBroken(callback: any): void;
        onConnectionEstablished(callback: any): void;
        onEnded(callback: any): void;
        onParticipantIdle(callback: any): void;
        onParticipantReturned(callback: any): void;
        onAutoDisconnection(callback: any): void;
        onConnectionLost(callback: any): void;
        onDeepHeartbeatSuccess(callback: any): void;
        onDeepHeartbeatFailure(callback: any): void;
        sendMessage(args: any): any;
        sendAttachment(args: any): any;
        downloadAttachment(args: any): any;
        connect(args: any): any;
        sendEvent(args: any): any;
        getTranscript(args: any): any;
        getChatDetails(): any;
        describeView(args: any): any;
    } | {
        disconnectParticipant(): any;
        controller: any;
        onMessage(callback: any): void;
        onTyping(callback: any): void;
        onReadReceipt(callback: any): void;
        onDeliveredReceipt(callback: any): void;
        onConnectionBroken(callback: any): void;
        onConnectionEstablished(callback: any): void;
        onEnded(callback: any): void;
        onParticipantIdle(callback: any): void;
        onParticipantReturned(callback: any): void;
        onAutoDisconnection(callback: any): void;
        onConnectionLost(callback: any): void;
        onDeepHeartbeatSuccess(callback: any): void;
        onDeepHeartbeatFailure(callback: any): void;
        sendMessage(args: any): any;
        sendAttachment(args: any): any;
        downloadAttachment(args: any): any;
        connect(args: any): any;
        sendEvent(args: any): any;
        getTranscript(args: any): any;
        getChatDetails(): any;
        describeView(args: any): any;
    };
    setGlobalConfig: (config: any) => void;
    LogLevel: {
        DEBUG: number;
        INFO: number;
        WARN: number;
        ERROR: number;
        ADVANCED_LOG: number;
    };
    Logger: typeof import("./log").Logger;
    SessionTypes: {
        AGENT: string;
        CUSTOMER: string;
    };
    csmService: {
        widgetType: string;
        logger: {
            options: any;
            debug(...args: any[]): any;
            info(...args: any[]): any;
            warn(...args: any[]): any;
            error(...args: any[]): any;
            advancedLog(...args: any[]): any;
            _shouldLog(level: any): boolean;
            _writeToClientLogger(level: any, logStatement: any): any;
            _log(level: any, args: any): any;
            _convertToSingleStatement(args: any): string;
            _convertToString(arg: any): any;
        };
        csmInitialized: boolean;
        metricsToBePublished: any[];
        agentMetricToBePublished: any[];
        MAX_RETRY: number;
        loadCsmScriptAndExecute(): void;
        initializeCSM(): void;
        updateCsmConfig(csmConfig: any): void;
        _hasCSMFailedToImport(): boolean;
        getDefaultDimensions(): {
            name: string;
            value: string;
        }[];
        addMetric(metric: any): void;
        setDimensions(metric: any, dimensions: any): void;
        addLatencyMetric(method: any, timeDifference: any, category: any, otherDimensions?: any[]): void;
        addLatencyMetricWithStartTime(method: any, startTime: any, category: any, otherDimensions?: any[]): void;
        addCountAndErrorMetric(method: any, category: any, error: any, otherDimensions?: any[]): void;
        addCountMetric(method: any, category: any, otherDimensions?: any[]): void;
        addAgentCountMetric(metricName: any, count: any): void;
    };
    setFeatureFlag: (feature: any) => void;
};
