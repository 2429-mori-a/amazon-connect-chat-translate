export function getEventTypeFromContentType(contentType: any): string;
export class ChatController {
    constructor(args: any);
    argsValidator: ChatServiceArgsValidator;
    pubsub: any;
    sessionType: any;
    getConnectionToken: any;
    connectionDetails: any;
    initialContactId: any;
    contactId: any;
    participantId: any;
    chatClient: any;
    participantToken: any;
    websocketManager: any;
    _participantDisconnected: boolean;
    sessionMetadata: {};
    connectionDetailsProvider: ConnectionDetailsProvider | null;
    logger: {
        options: any;
        debug(...args: any[]): any;
        info(...args: any[]): any;
        warn(...args: any[]): any;
        error(...args: any[]): any;
        advancedLog(...args: any[]): any;
        _shouldLog(level: any): boolean;
        _writeToClientLogger(level: any, logStatement: any): any;
        _log(level: any, args: any): any;
        _convertToSingleStatement(args: any): string;
        _convertToString(arg: any): any;
    };
    logMetaData: any;
    messageReceiptUtil: MessageReceiptsUtil;
    hasChatEnded: boolean;
    subscribe(eventName: any, callback: any): void;
    handleRequestSuccess(metadata: any, method: any, startTime: any, contentType: any): (response: any) => any;
    handleRequestFailure(metadata: any, method: any, startTime: any, contentType: any): (error: any) => Promise<never>;
    sendMessage(args: any): any;
    sendAttachment(args: any): any;
    downloadAttachment(args: any): any;
    sendEventIfChatHasNotEnded(...args: any[]): any;
    sendEvent(args: any): any;
    getTranscript(inputArgs?: {}): any;
    connect(args?: {}): Promise<{
        _debug: any;
        connectSuccess: boolean;
        connectCalled: boolean;
        metadata: {};
    }> | undefined;
    _initConnectionHelper(connectionDetailsProvider: any, connectionDetails: any): any;
    connectionHelper: LpcConnectionHelper | undefined;
    _getConnectionDetailsProvider(): ConnectionDetailsProvider;
    _handleEndedConnection(eventData: any): void;
    _handleLostConnection(eventData: any): void;
    _handleGainedConnection(eventData: any): void;
    _handleDeepHeartbeatSuccess(eventData: any): void;
    _handleDeepHeartbeatFailure(eventData: any): void;
    _handleIncomingMessage(incomingData: any): void;
    _forwardChatEvent(eventName: any, eventData: any): void;
    _onConnectSuccess(response: any, connectionDetailsProvider: any): {
        _debug: any;
        connectSuccess: boolean;
        connectCalled: boolean;
        metadata: {};
    };
    _onConnectFailure(error: any): Promise<never>;
    _shouldAcknowledgeContact(): boolean;
    breakConnection(): void | Promise<void>;
    cleanUpOnParticipantDisconnect(): void;
    disconnectParticipant(): any;
    getChatDetails(): {
        initialContactId: any;
        contactId: any;
        participantId: any;
        participantToken: any;
        connectionDetails: any;
    };
    describeView(args: any): any;
    _convertConnectionHelperStatus(connectionHelperStatus: any): string | undefined;
    getConnectionStatus(): string | undefined;
    _sendInternalLogToServer(logEntry: any): any;
    _validateConnectionStatus(functionName: any): boolean;
}
export namespace NetworkLinkStatus {
    const NeverEstablished: string;
    const Establishing: string;
    const Established: string;
    const Broken: string;
}
import { ChatServiceArgsValidator } from "./chatArgsValidator";
import ConnectionDetailsProvider from "./connectionHelpers/connectionDetailsProvider";
import MessageReceiptsUtil from "./MessageReceiptsUtil";
import LpcConnectionHelper from "./connectionHelpers/LpcConnectionHelper";
