export class EventBus {
    private constructor();
    /**
     * Subscribe to the named event.  Returns a new Subscription object
     * which can be used to unsubscribe.
     */
    subscribe(eventName: any, f: any): any;
    /**
     * Subscribe a function to be called on all events.
     */
    subscribeAll(f: any): any;
    /**
     * Get a list of subscriptions for the given event name, or an empty
     * list if there are no subscriptions.
     */
    getSubscriptions(eventName: any): any;
    /**
     * Trigger the given event with the given data.  All methods subscribed
     * to this event will be called and are provided with the given arbitrary
     * data object and the name of the event, in that order.
     */
    trigger(eventName: any, data: any): void;
    /**
     * Trigger the given event with the given data.  All methods subscribed
     * to this event will be called and are provided with the given arbitrary
     * data object and the name of the event, in that order.
     */
    triggerAsync(eventName: any, data: any): void;
    /**
     * Returns a closure which bridges an event from another EventBus to this bus.
     *
     * Usage:
     * conduit.onUpstream("MyEvent", bus.bridge());
     */
    bridge(): (data: any, event: any) => void;
    /**
     * Unsubscribe all events in the event bus.
     */
    unsubscribeAll(): void;
}
