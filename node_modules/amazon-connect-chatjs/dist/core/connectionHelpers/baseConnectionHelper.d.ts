export default class BaseConnectionHelper {
    constructor(connectionDetailsProvider: any, logMetaData: any);
    connectionDetailsProvider: any;
    isStarted: boolean;
    logger: {
        options: any;
        debug(...args: any[]): any;
        info(...args: any[]): any;
        warn(...args: any[]): any;
        error(...args: any[]): any;
        advancedLog(...args: any[]): any;
        _shouldLog(level: any): boolean;
        _writeToClientLogger(level: any, logStatement: any): any;
        _log(level: any, args: any): any;
        _convertToSingleStatement(args: any): string;
        _convertToString(arg: any): any;
    };
    startConnectionTokenPolling(isFirstCall?: boolean, expiry?: number): any;
    timeout: NodeJS.Timeout | undefined;
    start(): any;
    end(): void;
    getConnectionToken(): any;
    getConnectionTokenExpiry(): any;
    getTimeToConnectionTokenExpiry(): number;
}
export namespace ConnectionHelperStatus {
    const NeverStarted: string;
    const Starting: string;
    const Connected: string;
    const ConnectionLost: string;
    const Ended: string;
    const DeepHeartbeatSuccess: string;
    const DeepHeartbeatFailure: string;
}
export namespace ConnectionHelperEvents {
    const ConnectionLost_1: string;
    export { ConnectionLost_1 as ConnectionLost };
    export const ConnectionGained: string;
    const Ended_1: string;
    export { Ended_1 as Ended };
    export const IncomingMessage: string;
    const DeepHeartbeatSuccess_1: string;
    export { DeepHeartbeatSuccess_1 as DeepHeartbeatSuccess };
    const DeepHeartbeatFailure_1: string;
    export { DeepHeartbeatFailure_1 as DeepHeartbeatFailure };
}
export namespace ConnectionInfoType {
    const WEBSOCKET: string;
    const CONNECTION_CREDENTIALS: string;
}
