export default class ConnectionDetailsProvider {
    constructor(participantToken: any, chatClient: any, sessionType: any, getConnectionToken?: null);
    chatClient: any;
    participantToken: any;
    connectionDetails: {
        url: any;
        expiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: any;
        connectionToken: any;
        connectionTokenExpiry: any;
    } | {
        url: null;
        expiry: null;
        connectionToken: any;
        connectionTokenExpiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: boolean;
    } | null;
    connectionToken: any;
    connectionTokenExpiry: any;
    sessionType: any;
    getConnectionToken: any;
    getFetchedConnectionToken(): any;
    getConnectionTokenExpiry(): any;
    getConnectionDetails(): {
        url: any;
        expiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: any;
        connectionToken: any;
        connectionTokenExpiry: any;
    } | {
        url: null;
        expiry: null;
        connectionToken: any;
        connectionTokenExpiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: boolean;
    } | null;
    fetchConnectionDetails(): Promise<any>;
    _handleCreateParticipantConnectionResponse(connectionDetails: any, ConnectParticipant: any): {
        url: any;
        expiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: any;
        connectionToken: any;
        connectionTokenExpiry: any;
    } | {
        url: null;
        expiry: null;
        connectionToken: any;
        connectionTokenExpiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: boolean;
    };
    _handleGetConnectionTokenResponse(connectionTokenDetails: any): Promise<{
        url: any;
        expiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: any;
        connectionToken: any;
        connectionTokenExpiry: any;
    } | {
        url: null;
        expiry: null;
        connectionToken: any;
        connectionTokenExpiry: any;
        transportLifeTimeInSeconds: number;
        connectionAcknowledged: boolean;
    }>;
    callCreateParticipantConnection({ Type, ConnectParticipant }?: {
        Type?: boolean | undefined;
        ConnectParticipant?: boolean | undefined;
    }): any;
    _addParticipantConnectionMetric(startTime: any, error?: boolean): void;
    _fetchConnectionDetails(): Promise<any>;
}
