export const LogManager: LogManagerImpl;
export class Logger {
    debug(data: any): void;
    info(data: any): void;
    warn(data: any): void;
    error(data: any): void;
    advancedLog(data: any): void;
}
export namespace LogLevel {
    const DEBUG: number;
    const INFO: number;
    const WARN: number;
    const ERROR: number;
    const ADVANCED_LOG: number;
}
declare class LogManagerImpl {
    writeToClientLogger(level: any, logStatement?: string, logMetaData?: string): any;
    isLevelEnabled(level: any): boolean;
    hasClientLogger(): boolean;
    getLogger(options?: {}): LoggerWrapperImpl;
    updateLoggerConfig(inputConfig: any): void;
    _level: any;
    _advancedLogWriter: any;
    useClientLogger: boolean | undefined;
    _clientLogger: any;
    selectLogger(config: any): any;
}
declare class LoggerWrapperImpl extends LoggerWrapper {
    constructor(options: any);
    options: any;
    debug(...args: any[]): any;
    info(...args: any[]): any;
    warn(...args: any[]): any;
    error(...args: any[]): any;
    advancedLog(...args: any[]): any;
    _shouldLog(level: any): boolean;
    _writeToClientLogger(level: any, logStatement: any): any;
    _log(level: any, args: any): any;
    _convertToSingleStatement(args: any): string;
    _convertToString(arg: any): any;
}
declare class LoggerWrapper {
    debug(): void;
    info(): void;
    warn(): void;
    error(): void;
}
export {};
